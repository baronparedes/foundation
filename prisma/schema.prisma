datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  password  Password?

  fundTransactions FundTransaction[]
  projectVouchers  ProjectVoucher[]
  projectSetting   ProjectSetting[]
  projectAddOn     ProjectAddOn[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Project {
  id            String  @id @default(cuid())
  name          String
  code          String  @unique
  description   String?
  location      String
  estimatedCost Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fundTransactions FundTransaction[]
  projectVouchers  ProjectVoucher[]
  projectSetting   ProjectSetting[]
  projectAddOn     ProjectAddOn[]
}

model Fund {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  fundTransaction FundTransaction[]
  projectVoucher  ProjectVoucher[]
}

model FundTransaction {
  id          Int      @id @default(autoincrement())
  amount      Decimal
  createdAt   DateTime @default(now())
  description String   @default("")

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  fund   Fund   @relation(fields: [fundId], references: [id])
  fundId String

  type     String  @default("collection")
  comments String?
}

model ProjectVoucher {
  id              Int      @id @default(autoincrement())
  voucherNumber   String   @unique
  description     String   @default("")
  disbursedAmount Decimal
  consumedAmount  Decimal?
  isClosed        Boolean  @default(false)
  isDeleted       Boolean  @default(false)
  transactionDate DateTime
  updatedAt       DateTime @updatedAt

  updatedBy   User   @relation(fields: [updatedById], references: [id])
  updatedById String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  fund   Fund   @relation(fields: [fundId], references: [id])
  fundId String

  costPlus Boolean @default(true)

  projectVoucherDetail ProjectVoucherDetail[]
}

model ProjectVoucherDetail {
  id              Int      @id @default(autoincrement())
  description     String
  amount          Decimal
  supplierName    String
  referenceNumber String
  quantity        Decimal?

  projectVoucher   ProjectVoucher @relation(fields: [projectVoucherId], references: [id])
  projectVoucherId Int

  detailCategory   DetailCategory @relation(fields: [detailCategoryId], references: [id])
  detailCategoryId Int
}

model DetailCategory {
  id          Int    @id @default(autoincrement())
  description String @unique
  parentId    Int?

  projectVoucherDetail ProjectVoucherDetail[]
}

model ProjectSetting {
  id              Int     @id @default(autoincrement())
  description     String
  percentageAddOn Decimal

  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation(fields: [updatedById], references: [id])
  updatedById String

  startDate DateTime
  endDate   DateTime?

  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model ProjectAddOn {
  id          Int     @id @default(autoincrement())
  description String
  amount      Decimal
  quantity    Decimal
  total       Decimal

  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation(fields: [updatedById], references: [id])
  updatedById String

  costPlus Boolean @default(true)

  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}
